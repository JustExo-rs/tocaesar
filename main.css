<!DOCTYPE html >
<html lang="en" >
<head >
<meta charset="UTF-8" >
<meta name="viewport" content="width=device-width, initial-scale=1.0" >
<title > Terminal Chatbot</title >
<style >
/* CSS to style the terminal-like chat interface */
body {
    background-color: black;
    color: green;
    font-family: monospace;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

#chat-window {
    width: 80%;
    max-width: 800px;
    height: 600px;
    border: 2px solid green;
    padding: 20px;
    display: flex;
    flex-direction: column;
}

#chat-output {
    flex: 1;
    overflow-y: auto;
    padding-right: 10px;
    margin-bottom: 10px;
}

#chat-input {
    display: flex;
    align-items: center;
}

.prompt {
    margin-right: 10px;
}

input {
    background-color: black;
    border: none;
    color: green;
    width: 100%;
}

    input:focus {
        outline: none;
    }

p {
    margin: 5px 0;
}

</style >
</head >
<body >

<div id="chat-window" >
<div id="chat-output" > </div >
<div id="chat-input" >
<span class="prompt" > user@terminal: ~ $</span >
<input type="text" id="user-input" autofocus autocomplete="off" >
</div >
</div >

<script >
// JavaScript to handle chat input and output
document.getElementById("user-input").addEventListener("keydown", function (e) {
      if (e.key === "Enter") {
        const input = this.value.trim();
        if (input) {
          handleCommand(input);
          this.value = '';  // Clear input field
        }
      }
    });

function handleCommand(command) {
    const output = document.getElementById("chat-output");
    const userLine = `<p><span class="prompt">user@terminal:~$</span> $

{
    command
}

</p > `;
output.innerHTML + = userLine;

let response;
switch (command.toLowerCase()) {
    case "help": response = "Available commands: 'price', 'token', 'help', 'exit'.";
    break;
    case "price": response = "Fetching token prices...";
    // You can replace this with actual API call fetchTokenPrice().then(price => {
            response = `Current price of Solana (SOL): $${price}`;
            output.innerHTML += `<p>${response}</p>`;
            scrollChatToBottom();
          });
    return;
    case "token": response = "Displaying token info...";
    // Add your custom logic here break;
    case "exit": response = "Exiting terminal. Goodbye!";
    break;
    default: response = `Unknown command: $

{
    command
}

`;
}

output.innerHTML + = `<p > $ {
    response
}

</p > `;
scrollChatToBottom();
}

async function fetchTokenPrice() {
    try

{
    const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd');
    const data = await response.json();
    return data.solana.usd;
}

catch (error) {
    return 'Error fetching price';
}

}

function scrollChatToBottom() {
    const output = document.getElementById("chat-output");
    output .scrollTop = output.scrollHeight;
}

</script >

</body >
</html >
